{
  "version": "1.0",
  "cells": [
    {
      "type": "markdown",
      "content": "# Explore data with Python - visualize data\n\nIn this notebook, we'll apply a few techniques to analyze data with basic statistics and visualize it using graphs.\n\n## Load data\n\nBefore we begin, let's load the same data about study hours that we analyzed in the previous notebook. We'll also recalculate who passed the class in the same way as last time.\n\n1. Download [grades.csv](https://raw.githubusercontent.com/MicrosoftLearning/mslearn-ml-basics/refs/heads/main/Labfiles/data/grades.csv){:target=\"_blank\"} in a new browser tab, and save it on your local disk.\n2. Then use the **Upload Data** button at the top of this notebook to upload it.\n3. Run the next cell by clicking the **&#9658; Run** button to load the data from the file into a dataframe.\n"
    },
    {
      "type": "python",
      "content": "import pandas as pd\n\n# Load data from a text file\ndf_students = pd.read_csv('grades.csv',delimiter=',',header='infer')\n\n# Remove any rows with missing data\ndf_students = df_students.dropna(axis=0, how='any')\n\n# Calculate who passed, assuming '60' is the grade needed to pass\npasses  = pd.Series(df_students['Grade'] >= 60)\n\n# Save who passed to the Pandas dataframe\ndf_students = pd.concat([df_students, passes.rename(\"Pass\")], axis=1)\n\n\n# Print the result out into this notebook\nprint(df_students)"
    },
    {
      "type": "markdown",
      "content": "## Visualize data with Matplotlib\n\nDataFrames provide a great way to explore and analyze tabular data, but sometimes a picture is worth a thousand rows and columns. The **Matplotlib** library provides the foundation for plotting data visualizations that can greatly enhance your ability to analyze the data.\n\nLet's start with a simple bar chart that shows the grade of each student.\n\n**Note**: This first graph may take one to two minutes to render. Subsequent graphs will render more quickly."
    },
    {
      "type": "python",
      "content": "from matplotlib import pyplot as plt\n\n# Create a bar plot of name vs grade\nplt.bar(x=df_students.Name, height=df_students.Grade)\n\n# Display the plot\nplt.show()"
    },
    {
      "type": "markdown",
      "content": "Well, that worked, but the chart could use some improvements to make it clearer what we're looking at.\n\nNote that you used the **pyplot** class from Matplotlib to plot the chart. This class provides many ways to improve the visual elements of the plot. For example, the following code:\n\n- Specifies the color of the bar chart.\n- Adds a title to the chart (so we know what it represents)\n- Adds labels to the X and Y axes (so we know which axis shows which data)\n- Adds a grid (to make it easier to determine the values for the bars)\n- Rotates the X markers (so we can read them)"
    },
    {
      "type": "python",
      "content": "# Create a bar plot of name vs grade\nplt.bar(x=df_students.Name, height=df_students.Grade, color='orange')\n\n# Customize the chart\nplt.title('Student Grades')\nplt.xlabel('Student')\nplt.ylabel('Grade')\nplt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\nplt.xticks(rotation=90)\n\n# Display the plot\nplt.show()"
    },
    {
      "type": "markdown",
      "content": "A plot is technically contained within a **Figure**. In the previous examples, the figure was created implicitly for you, but you can create it explicitly. For example, the following code creates a figure with a specific size."
    },
    {
      "type": "python",
      "content": "# Create a Figure\nfig = plt.figure(figsize=(8,3))\n\n# Create a bar plot of name vs grade\nplt.bar(x=df_students.Name, height=df_students.Grade, color='orange')\n\n# Customize the chart\nplt.title('Student Grades')\nplt.xlabel('Student')\nplt.ylabel('Grade')\nplt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)\nplt.xticks(rotation=90)\n\n# Show the figure\nplt.show()"
    },
    {
      "type": "markdown",
      "content": "A figure can contain multiple subplots, each on its own *axis*.\n\nFor example, the following code creates a figure with two subplots: one is a bar chart showing student grades, and the other is a pie chart comparing the number of passing grades to non-passing grades."
    },
    {
      "type": "python",
      "content": "# Create a figure for 2 subplots (1 row, 2 columns)\nfig, ax = plt.subplots(1, 2, figsize = (10,4))\n\n# Create a bar plot of name vs grade on the first axis\nax[0].bar(x=df_students.Name, height=df_students.Grade, color='orange')\nax[0].set_title('Grades')\nax[0].set_xticklabels(df_students.Name, rotation=90)\n\n# Create a pie chart of pass counts on the second axis\npass_counts = df_students['Pass'].value_counts()\nax[1].pie(pass_counts, labels=pass_counts)\nax[1].set_title('Passing Grades')\nax[1].legend(pass_counts.keys().tolist())\n\n# Add a title to the Figure\nfig.suptitle('Student Data')\n\n# Show the figure\nfig.show()"
    },
    {
      "type": "markdown",
      "content": "Until now, you've used methods of the `Matplotlib.pyplot` object to plot charts. However, Matplotlib is so foundational to graphics in Python that many packages, including Pandas, provide methods that abstract the underlying Matplotlib functions and simplify plotting. For example, the DataFrame provides its own methods for plotting data as shown in the following example, which plots a bar chart of study hours."
    },
    {
      "type": "python",
      "content": "df_students.plot.bar(x='Name', y='StudyHours', color='teal', figsize=(6,4))"
    },
    {
      "type": "markdown",
      "content": "## Getting started with statistical analysis\n\nNow that you know how to use Python to manipulate and visualize data, you can start analyzing it.\n\nA lot of data science is rooted in *statistics*, so we'll explore some basic statistical techniques.\n\n> **Note**: This section is <u>not</u> intended to teach you statistics; that's much too big a topic for this notebook. It will, however, introduce you to some statistical concepts and techniques that data scientists use as they explore data in preparation for machine learning modeling.\n\n### Descriptive statistics and data distribution\n\nWhen examining a *variable* (for example, a sample of student grades), data scientists are particularly interested in its *distribution* (in other words, how all the different grade values are spread across the sample). The starting point for this exploration is often to visualize the data as a histogram and see how frequently each value for the variable occurs.\n"
    },
    {
      "type": "python",
      "content": "# Get the variable to examine\nvar_data = df_students['Grade']\n\n# Create a Figure\nfig = plt.figure(figsize=(10,4))\n\n# Plot a histogram\nplt.hist(var_data)\n\n# Add titles and labels\nplt.title('Data Distribution')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\n\n# Show the figure\nfig.show()"
    },
    {
      "type": "markdown",
      "content": "The histogram for grades is a symmetric shape, where the most frequently occurring grades tend to be in the middle of the range (around 50), with fewer grades at the extreme ends of the scale.\n\n**Measures of central tendency**\n\nTo understand the distribution better, we can examine so-called *measures of central tendency*, which is a fancy way of describing statistics that represent the \"middle\" of the data. The goal of this analysis is to try to find a \"typical\" value. Common ways to define the middle of the data include:\n\n- The *mean*: A simple average based on adding together all of the values in the sample set and then dividing the total by the number of samples.\n- The *median*: The value in the middle of the range of all of the sample values.\n- The *mode*: The most commonly occurring value in the sample set<sup>+</sup>.\n\nLet's calculate these values, along with the minimum and maximum values for comparison, and show them on the histogram.\n\n> <sup>+</sup>Of course, in some sample sets, there might be a tie for the most common value. In those cases, the dataset is described as *bimodal* or even *multimodal*."
    },
    {
      "type": "python",
      "content": "# Get the variable to examine\nvar = df_students['Grade']\n\n# Get statistics\nmin_val = var.min()\nmax_val = var.max()\nmean_val = var.mean()\nmed_val = var.median()\nmod_val = var.mode()[0]\n\nprint('Minimum:{:.2f}\\nMean:{:.2f}\\nMedian:{:.2f}\\nMode:{:.2f}\\nMaximum:{:.2f}\\n'.format(min_val,\n                                                                                        mean_val,\n                                                                                        med_val,\n                                                                                        mod_val,\n                                                                                        max_val))\n\n# Create a Figure\nfig = plt.figure(figsize=(10,4))\n\n# Plot a histogram\nplt.hist(var)\n\n# Add lines for the statistics\nplt.axvline(x=min_val, color = 'gray', linestyle='dashed', linewidth = 2)\nplt.axvline(x=mean_val, color = 'cyan', linestyle='dashed', linewidth = 2)\nplt.axvline(x=med_val, color = 'red', linestyle='dashed', linewidth = 2)\nplt.axvline(x=mod_val, color = 'yellow', linestyle='dashed', linewidth = 2)\nplt.axvline(x=max_val, color = 'gray', linestyle='dashed', linewidth = 2)\n\n# Add titles and labels\nplt.title('Data Distribution')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\n\n# Show the figure\nfig.show()"
    },
    {
      "type": "markdown",
      "content": "For the grade data, the mean, median, and mode all seem to be more or less in the middle of the minimum and maximum, at around 50.\n\nAnother way to visualize the distribution of a variable is to use a *box* plot (sometimes called a *box-and-whiskers* plot). Let's create one for the grade data."
    },
    {
      "type": "python",
      "content": "# Get the variable to examine\nvar = df_students['Grade']\n\n# Create a Figure\nfig = plt.figure(figsize=(10,4))\n\n# Plot a histogram\nplt.boxplot(var)\n\n# Add titles and labels\nplt.title('Data Distribution')\n\n# Show the figure\nfig.show()"
    },
    {
      "type": "markdown",
      "content": "The box plot shows the distribution of the grade values in a format different from the histogram. The *box* part of the plot shows where the inner two *quartiles* of the data reside. In this case, half of the grades are between approximately 36 and 63. The *whiskers* extending from the box show the outer two quartiles, so the other half of the grades in this case are between 0 and 36 or 63 and 100. The line in the box indicates the *median* value.\n\nFor learning, it's useful to combine histograms and box plots, with the box plot's orientation changed to align it with the histogram. (In some ways, it's helpful to think of the histogram as a \"front elevation\" view of the distribution, and the box plot as a \"plan\" view of the distribution from above.)"
    },
    {
      "type": "python",
      "content": "# Create a function that we can re-use\ndef show_distribution(var_data):\n    from matplotlib import pyplot as plt\n\n    # Get statistics\n    min_val = var_data.min()\n    max_val = var_data.max()\n    mean_val = var_data.mean()\n    med_val = var_data.median()\n    mod_val = var_data.mode()[0]\n\n    print('Minimum:{:.2f}\\nMean:{:.2f}\\nMedian:{:.2f}\\nMode:{:.2f}\\nMaximum:{:.2f}\\n'.format(min_val,\n                                                                                            mean_val,\n                                                                                            med_val,\n                                                                                            mod_val,\n                                                                                            max_val))\n\n    # Create a figure for 2 subplots (2 rows, 1 column)\n    fig, ax = plt.subplots(2, 1, figsize = (10,4))\n\n    # Plot the histogram   \n    ax[0].hist(var_data)\n    ax[0].set_ylabel('Frequency')\n\n    # Add lines for the mean, median, and mode\n    ax[0].axvline(x=min_val, color = 'gray', linestyle='dashed', linewidth = 2)\n    ax[0].axvline(x=mean_val, color = 'cyan', linestyle='dashed', linewidth = 2)\n    ax[0].axvline(x=med_val, color = 'red', linestyle='dashed', linewidth = 2)\n    ax[0].axvline(x=mod_val, color = 'yellow', linestyle='dashed', linewidth = 2)\n    ax[0].axvline(x=max_val, color = 'gray', linestyle='dashed', linewidth = 2)\n\n    # Plot the boxplot   \n    ax[1].boxplot(var_data, vert=False)\n    ax[1].set_xlabel('Value')\n\n    # Add a title to the Figure\n    fig.suptitle('Data Distribution')\n\n    # Show the figure\n    fig.show()\n\n# Get the variable to examine\ncol = df_students['Grade']\n# Call the function\nshow_distribution(col)"
    },
    {
      "type": "markdown",
      "content": "All of the measurements of central tendency are right in the middle of the data distribution, which is symmetric with values becoming progressively lower in both directions from the middle.\n\nTo explore this distribution in more detail, you need to understand that statistics is fundamentally about taking *samples* of data and using probability functions to extrapolate information about the full *population* of data.\n\nWhat does this mean? *Samples* refer to the data we have on hand, such as information about these 22 students' study habits and grades. The *population* refers to all possible data we could collect, such as every student's grades and study habits across every educational institution throughout the history of time. Usually, we're interested in the population, but it's simply not practical to collect all of that data. Instead, we need to try estimate what the population is like from the small amount of data (samples) that we have.\n\nIf we have enough samples, we can calculate something called a *probability density function*, which estimates the distribution of grades for the full population.\n\nThe **pyplot** class from Matplotlib provides a helpful plot function to show this density."
    },
    {
      "type": "python",
      "content": "def show_density(var_data):\n    from matplotlib import pyplot as plt\n\n    fig = plt.figure(figsize=(10,4))\n\n    # Plot density\n    var_data.plot.density()\n\n    # Add titles and labels\n    plt.title('Data Density')\n\n    # Show the mean, median, and mode\n    plt.axvline(x=var_data.mean(), color = 'cyan', linestyle='dashed', linewidth = 2)\n    plt.axvline(x=var_data.median(), color = 'red', linestyle='dashed', linewidth = 2)\n    plt.axvline(x=var_data.mode()[0], color = 'yellow', linestyle='dashed', linewidth = 2)\n\n    # Show the figure\n    plt.show()\n\n# Get the density of Grade\ncol = df_students['Grade']\nshow_density(col)"
    },
    {
      "type": "markdown",
      "content": "As expected from the histogram of the sample, the density shows the characteristic \"bell curve\" of what statisticians call a *normal* distribution with the mean and mode at the center and symmetric tails.\n\n## Summary\n\nWell done! There were a number of new concepts in here, so let's summarize. \n\nHere, we:\n\n1. Made graphs with Matplotlib.\n2. Learned how to customize these graphs.\n3. Calculated basic statistics, such as medians.\n4. Looked at the spread of data using box plots and histograms.\n5. Learned about samples versus populations.\n6. Estimated what the population of grades might look like from a sample of grades.\n"
    }
  ]
}